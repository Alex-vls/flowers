#!/usr/bin/env node

const https = require('https');
const http = require('http');

const BASE_URL = 'https://msk-flower.su';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https') ? https : http;
    
    client.get(url, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    }).on('error', reject);
  });
}

// –¢–µ—Å—Ç—ã
async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è MSK Flower...\n');
  
  const tests = [
    {
      name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
      url: BASE_URL,
      expectedStatus: 200,
      expectedContent: ['MSK Flower', '–¥–æ—Å—Ç–∞–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤']
    },
    {
      name: 'Telegram Mini App',
      url: `${BASE_URL}/telegram`,
      expectedStatus: 200,
      expectedContent: ['MSK Flower', 'Yandex.Metrika']
    },
    {
      name: 'API - –°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤',
      url: `${BASE_URL}/api/v1/flowers`,
      expectedStatus: 200,
      expectedContent: ['items', 'total']
    },
    {
      name: 'API - Telegram webhook info',
      url: `${BASE_URL}/api/v1/telegram/webhook-info`,
      expectedStatus: 200,
      expectedContent: ['ok', 'result']
    }
  ];

  let passed = 0;
  let failed = 0;

  for (const test of tests) {
    try {
      console.log(`‚è≥ ${test.name}...`);
      const result = await makeRequest(test.url);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      if (result.statusCode !== test.expectedStatus) {
        console.log(`‚ùå ${test.name} - –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${result.statusCode} (–æ–∂–∏–¥–∞–ª—Å—è ${test.expectedStatus})`);
        failed++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      let contentCheck = true;
      for (const expectedText of test.expectedContent) {
        if (!result.data.includes(expectedText)) {
          console.log(`‚ùå ${test.name} - –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: "${expectedText}"`);
          contentCheck = false;
        }
      }
      
      if (contentCheck) {
        console.log(`‚úÖ ${test.name} - OK`);
        passed++;
      } else {
        failed++;
      }
      
    } catch (error) {
      console.log(`‚ùå ${test.name} - –û—à–∏–±–∫–∞: ${error.message}`);
      failed++;
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${passed + failed} (${Math.round(passed / (passed + failed) * 100)}%)`);

  if (failed === 0) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.');
  }
}

// –ó–∞–ø—É—Å–∫
runTests().catch(console.error); 
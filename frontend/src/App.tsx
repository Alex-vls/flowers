import { Routes, Route, useNavigate, useLocation } from 'react-router-dom'
import { Suspense, lazy, useEffect } from 'react'

import Layout from '@/components/Layout'
import LoadingSpinner from '@/components/ui/LoadingSpinner'
import { useAuthStore } from '@/store'
import { getValidToken, clearAuthData, validateToken } from '@/lib/tokenUtils'

// Lazy load pages
const HomePage = lazy(() => import('@/pages/HomePage'))
const CatalogPage = lazy(() => import('@/pages/CatalogPage'))
const FlowerDetailPage = lazy(() => import('@/pages/FlowerDetailPage'))
const CartPage = lazy(() => import('@/pages/CartPage'))
const PaymentSuccessPage = lazy(() => import('@/pages/PaymentSuccessPage'))
const SubscriptionPage = lazy(() => import('@/pages/SubscriptionPage'))
const OrdersPage = lazy(() => import('@/pages/OrdersPage'))
const ProfilePage = lazy(() => import('@/pages/ProfilePage'))
const BonusPage = lazy(() => import('@/pages/BonusPage'))
const LoginPage = lazy(() => import('@/pages/LoginPage'))
const RegisterPage = lazy(() => import('@/pages/RegisterPage'))
const AdminPage = lazy(() => import('@/pages/AdminPage'))
const NewsPage = lazy(() => import('@/pages/NewsPage'))
const SupportPage = lazy(() => import('@/pages/SupportPage'))
const PolicyPage = lazy(() => import('@/pages/PolicyPage'))
const TelegramApp = lazy(() => import('@/pages/TelegramApp'))
const NotFoundPage = lazy(() => import('@/pages/NotFoundPage'))

function App() {
  const { setUser, setToken } = useAuthStore()
  const navigate = useNavigate()
  const location = useLocation()

  // ‚úÖ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ Telegram Mini App
  useEffect(() => {
    const checkTelegramMiniApp = () => {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram Mini App
      const tg = (window as any).Telegram?.WebApp
      const hasRealInitData = tg?.initData && tg.initData !== "empty" && tg.initData.length > 0
      const hasRealPlatform = tg?.platform && tg.platform !== "unknown" 
      const hasUserData = tg?.initDataUnsafe?.user?.id
      const isTelegramUserAgent = navigator.userAgent.includes('Telegram')
      const isTelegramMiniApp = !!(hasRealInitData && hasRealPlatform && hasUserData && isTelegramUserAgent)
      const isOnTelegramPage = location.pathname === '/telegram'
      
      console.log('üîç App: Checking Telegram Mini App:', {
        isTelegramMiniApp,
        isOnTelegramPage,
        currentPath: location.pathname,
        hasTelegramWebApp: !!tg,
        hasRealInitData,
        hasRealPlatform, 
        hasUserData,
        isTelegramUserAgent,
        userAgent: navigator.userAgent.substring(0, 100),
        initData: tg?.initData,
        platform: tg?.platform,
        version: tg?.version
      })
      
      // üö® –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–î–ò–†–ï–ö–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      console.log('üîß –û–¢–õ–ê–î–ö–ê: –†–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Mini App')
      
      // –ï—Å–ª–∏ –≤ Telegram Mini App, –Ω–æ –ù–ï –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /telegram - –ù–ï –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫–∞
      if (isTelegramMiniApp && !isOnTelegramPage) {
        console.log('üöÄ App: WOULD redirect to /telegram from', location.pathname, '–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç–∫–ª—é—á–µ–Ω')
        // navigate('/telegram', { replace: true })
        return
      }
      
      // –ï—Å–ª–∏ –ù–ï –≤ Telegram Mini App, –Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /telegram - –ù–ï –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫–∞
      if (!isTelegramMiniApp && isOnTelegramPage) {
        console.log('üîÑ App: WOULD redirect to home page from /telegram –Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç–∫–ª—é—á–µ–Ω')
        // navigate('/', { replace: true })
        return
      }
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª–∏ —Ç–∞–π–º–∞—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –≤—ã–∑—ã–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    checkTelegramMiniApp()
    
    // Cleanup –Ω–µ –Ω—É–∂–µ–Ω
  }, [navigate, location.pathname])

  // Initialize auth state from localStorage with token validation
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        // –£–±—Ä–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ telegram_auth
        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π popup flow –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        
        // –û–±—ã—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage
        // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π)
        const validToken = getValidToken()
        const userStr = localStorage.getItem('auth-storage')
        
        if (validToken && userStr) {
          const authData = JSON.parse(userStr)
          if (authData?.state?.user) {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            const tokenValidation = validateToken(validToken)
            
            if (tokenValidation.isValid) {
              setUser(authData.state.user)
              setToken(validToken)
              
              console.log(`üîê Auth initialized. Token expires in ${tokenValidation.timeRemaining} minutes`)
              
              // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç
              if (tokenValidation.timeRemaining < 10) {
                console.warn('‚ö†Ô∏è Token expires soon, consider refreshing')
              }
            } else {
              console.warn('‚ùå Token validation failed:', tokenValidation.error)
              clearAuthData()
            }
          }
        } else {
          // –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          if (!validToken) {
            console.log('üîì No valid token found')
          }
          if (!userStr) {
            console.log('üë§ No user data found')
          }
        }
      } catch (error) {
        console.error('üí• Error initializing auth:', error)
        clearAuthData()
      }
    }

    initializeAuth()
  }, [setUser, setToken])

  return (
    <Routes>
      {/* Telegram Mini App without Layout */}
      <Route path="/telegram" element={
        <Suspense fallback={<LoadingSpinner />}>
          <TelegramApp />
        </Suspense>
      } />
      
      {/* All other routes with Layout */}
      <Route path="/*" element={
        <Layout>
          <Suspense fallback={<LoadingSpinner />}>
            <Routes>
              <Route path="/" element={<HomePage />} />
              <Route path="/catalog" element={<CatalogPage />} />
              <Route path="/flower/:id" element={<FlowerDetailPage />} />
              <Route path="/cart" element={<CartPage />} />
              <Route path="/payment/success" element={<PaymentSuccessPage />} />
              <Route path="/subscription" element={<SubscriptionPage />} />
              <Route path="/orders" element={<OrdersPage />} />
              <Route path="/profile" element={<ProfilePage />} />
              <Route path="/bonuses" element={<BonusPage />} />
              <Route path="/login" element={<LoginPage />} />
              <Route path="/register" element={<RegisterPage />} />
              <Route path="/admin/*" element={<AdminPage />} />
              <Route path="/news" element={<NewsPage />} />
              <Route path="/support" element={<SupportPage />} />
              <Route path="/policy" element={<PolicyPage />} />
              <Route path="*" element={<NotFoundPage />} />
            </Routes>
          </Suspense>
        </Layout>
      } />
    </Routes>
  )
}

export default App 
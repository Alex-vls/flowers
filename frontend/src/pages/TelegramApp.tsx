import React, { useState, useEffect } from 'react'
import { useAuthStore } from '@/store'
import { useAuth } from '@/hooks/useAuth'
import { useCart } from '@/hooks/useCart'
import Card from '@/components/ui/Card'
import Button from '@/components/ui/Button'
import Badge from '@/components/ui/Badge'
import LoadingSpinner from '@/components/ui/LoadingSpinner'
import Alert from '@/components/ui/Alert'
import { 
  FlowerIcon, 
  UserIcon, 
  ShoppingBagIcon,
  BellIcon,
  GiftIcon
} from 'lucide-react'
import { Flower } from '@/types'

interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  language_code?: string
}

declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        ready: () => void
        expand: () => void
        close: () => void
        MainButton?: {
          text: string
          color: string
          textColor: string
          isVisible: boolean
          isActive: boolean
          setText: (text: string) => void
          onClick: (callback: () => void) => void
          show: () => void
          hide: () => void
        }
        HapticFeedback?: {
          impactOccurred: (style: 'light' | 'medium' | 'heavy') => void
        }
        initData: string
        initDataUnsafe: {
          user?: TelegramUser
          auth_date?: number
          hash?: string
        }
        colorScheme: 'light' | 'dark'
        platform: string
        version: string
      }
    }
  }
}

export default function TelegramApp() {
  const { user, isAuthenticated } = useAuthStore()
  const { loginTelegramMiniApp, isTelegramAuthLoading } = useAuth()
  const { items: cartItems, addToCart } = useCart()
  
  const [activeTab, setActiveTab] = useState<'catalog' | 'profile' | 'orders' | 'notifications' | 'bonuses'>('catalog')
  const [profileTab, setProfileTab] = useState<'orders' | 'history' | 'subscription'>('orders')
  const [flowers, setFlowers] = useState<Flower[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [authError, setAuthError] = useState<string | null>(null)
  const [debugInfo, setDebugInfo] = useState<any>(null) // ‚úÖ –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

  // Fetch flowers
  useEffect(() => {
    const fetchFlowers = async () => {
      try {
        const response = await fetch('/api/v1/flowers?limit=20')
        if (response.ok) {
          const data = await response.json()
          setFlowers(data?.items || [])
        }
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥')
      } finally {
        setIsLoading(false)
      }
    }

    fetchFlowers()
  }, [])

  // Initialize Telegram Web App
  useEffect(() => {
    console.log('üîç TelegramApp: Starting initialization...')
    console.log('üîç window.Telegram:', window.Telegram)
    console.log('üîç window.Telegram?.WebApp:', window.Telegram?.WebApp)
    
    // ‚úÖ –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp API
    if (!window.Telegram) {
      console.error('‚ùå TelegramApp: window.Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      setAuthError('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram.')
      return
    }
    
    if (!window.Telegram.WebApp) {
      console.error('‚ùå TelegramApp: window.Telegram.WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      setAuthError('Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ Mini App –≤ Telegram.')
      return
    }
    
    const tg = window.Telegram.WebApp
    
    console.log('üîç TelegramApp: Initializing WebApp', {
      initData: tg.initData ? `${tg.initData.length} chars` : 'empty',
      initDataUnsafe: tg.initDataUnsafe,
      user: tg.initDataUnsafe?.user,
      isAuthenticated: isAuthenticated,
      version: tg.version,
      colorScheme: tg.colorScheme,
      isExpanded: tg.isExpanded
    })
    
    tg.ready()
    tg.expand()
    
    console.log('üì± TelegramApp: WebApp ready and expanded')
    
    // Apply Telegram theme
    const isDark = tg.colorScheme === 'dark'
    document.documentElement.classList.toggle('dark', isDark)
    console.log('üé® TelegramApp: Theme applied:', isDark ? 'dark' : 'light')
    
    // Setup main button
    if (tg.MainButton) {
      tg.MainButton.setText('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
      tg.MainButton.onClick(() => {
        setActiveTab('catalog')
      })
      console.log('üîò TelegramApp: Main button configured')
    }

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (tg.initDataUnsafe?.user && tg.initData && !isAuthenticated) {
      console.log('üöÄ TelegramApp: Auto-authenticating user', tg.initDataUnsafe.user)
      console.log('üîê TelegramApp: initData preview:', tg.initData.substring(0, 100) + '...')
      authenticateUser()
    } else {
      console.log('‚ùå TelegramApp: Auto-auth skipped', {
        hasUser: !!tg.initDataUnsafe?.user,
        hasInitData: !!tg.initData,
        initDataLength: tg.initData?.length || 0,
        isAuthenticated: isAuthenticated
      })
      
      // ‚úÖ –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (!tg.initDataUnsafe?.user) {
        console.warn('‚ö†Ô∏è TelegramApp: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ initDataUnsafe')
        console.log('üîç TelegramApp: –î–µ—Ç–∞–ª–∏:', {
          initDataUnsafe: tg.initDataUnsafe,
          platform: tg.platform,
          version: tg.version
        })
      }
      
      if (!tg.initData) {
        console.warn('‚ö†Ô∏è TelegramApp: –ù–µ—Ç initData')
      }
    }

    // Haptic feedback on interactions
    window.Telegram?.WebApp?.HapticFeedback?.impactOccurred('light')
    console.log('üì≥ TelegramApp: Haptic feedback activated')

    // ‚úÖ –ù–û–í–û–ï: –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ isAuthenticated
    if (isAuthenticated) {
      console.log('‚úÖ TelegramApp: User authenticated, switching to profile tab')
      setActiveTab('profile')
    }
  }, [isAuthenticated])

  // Update main button based on cart
  useEffect(() => {
    if (window.Telegram?.WebApp?.MainButton && cartItems.length > 0) {
      const tg = window.Telegram.WebApp
      if (tg.MainButton) {
        tg.MainButton.setText(`–ö–æ—Ä–∑–∏–Ω–∞ (${cartItems.length})`)
        tg.MainButton.show()
      }
    }
  }, [cartItems])

  const authenticateUser = async () => {
    const tg = window.Telegram?.WebApp
    if (!tg?.initData) {
      console.error('‚ùå TelegramApp: No initData available for authentication')
      setAuthError('Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
      return
    }

    console.log('üîê TelegramApp: Starting authentication...')
    setAuthError(null)
    setDebugInfo({ step: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...', timestamp: new Date().toLocaleTimeString() })
    
    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ useAuth
      await loginTelegramMiniApp(tg.initData)
      
      console.log('‚úÖ TelegramApp: Authentication successful!')
      
      // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const savedAccessToken = localStorage.getItem('access_token')
      const savedRefreshToken = localStorage.getItem('refresh_token')
      
      const tokenCheck = {
        hasAccessToken: !!savedAccessToken,
        accessTokenLength: savedAccessToken?.length || 0,
        hasRefreshToken: !!savedRefreshToken,
        refreshTokenLength: savedRefreshToken?.length || 0,
        localStorageSupported: typeof(Storage) !== "undefined"
      }
      
      console.log('üîç TelegramApp: Saved tokens check:', tokenCheck)
      
      // ‚úÖ –ù–û–í–û–ï: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ç–æ–∫–µ–Ω–∞
      let tokenTestResult = null
      if (savedAccessToken) {
        console.log('üß™ TelegramApp: Testing token with /users/me...')
        try {
          const testResponse = await fetch('/api/v1/users/me', {
            headers: {
              'Authorization': `Bearer ${savedAccessToken}`,
              'Content-Type': 'application/json'
            }
          })
          
          tokenTestResult = {
            status: testResponse.status,
            statusText: testResponse.statusText,
            ok: testResponse.ok
          }
          
          console.log('üß™ TelegramApp: Token test result:', tokenTestResult)
          
          if (testResponse.ok) {
            const userData = await testResponse.json()
            console.log('‚úÖ TelegramApp: Token works! User data:', userData)
          } else {
            const errorData = await testResponse.json()
            console.error('‚ùå TelegramApp: Token failed:', errorData)
            tokenTestResult.error = errorData
          }
        } catch (tokenTestError) {
          console.error('‚ùå TelegramApp: Token test error:', tokenTestError)
          tokenTestResult = { error: String(tokenTestError) }
        }
      }
      
      // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ UI
      setDebugInfo({
        step: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        timestamp: new Date().toLocaleTimeString(),
        tokens: tokenCheck,
        tokenTest: tokenTestResult,
        userAuthenticated: isAuthenticated
      })
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (user) {
        const flowersResponse = await fetch('/api/v1/flowers?limit=20')
        if (flowersResponse.ok) {
          const flowersData = await flowersResponse.json()
          setFlowers(flowersData?.items || [])
        }
      }
      
    } catch (error: any) {
      const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      console.error('‚ùå TelegramApp: Authentication failed:', errorMessage)
      setAuthError(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorMessage}`)
      setDebugInfo({
        step: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        timestamp: new Date().toLocaleTimeString(),
        error: errorMessage
      })
    }
  }

  const handleAddToCart = (flower: Flower) => {
    addToCart({
      id: flower.id,
      name: flower.name,
      price: flower.price,
      image_url: flower.image_url
    })
    window.Telegram?.WebApp?.HapticFeedback?.impactOccurred('medium')
  }

  const handleAddToSubscription = (flower: Flower) => {
    if (!isAuthenticated) {
      alert('–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
      return
    }
    handleAddToSubscriptionAPI(flower.id)
  }

  const renderCatalog = () => (
    <div className="p-4 pb-20">
      <h2 className="text-xl font-bold text-gray-900 mb-6 flex items-center">
        <FlowerIcon className="w-6 h-6 mr-2 text-pink-500" />
        –ö–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤
      </h2>
      
      {authError && (
        <Alert type="error" className="mb-4">
          {authError}
        </Alert>
      )}
      
      {isLoading ? (
        <div className="flex justify-center py-8">
          <LoadingSpinner />
        </div>
      ) : error ? (
        <Alert type="error">
          –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤
        </Alert>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {flowers?.map((flower: Flower) => {
            const isInStock = flower.is_available
            return (
              <div key={flower.id} className="bg-white rounded-2xl shadow-sm overflow-hidden">
                <div className="relative">
                  <img 
                    src={flower.image_url} 
                    alt={flower.name}
                    className="w-full h-40 object-cover"
                  />
                  {!isInStock && (
                    <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                      <span className="text-white font-medium">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</span>
                    </div>
                  )}
                  <Badge 
                    className="absolute top-2 right-2 bg-white/90 text-gray-700"
                  >
                    {flower.price}‚ÇΩ
                  </Badge>
                </div>
                
                <div className="p-3">
                  <h3 className="font-semibold text-gray-900 mb-1 text-sm">{flower.name}</h3>
                  <p className="text-xs text-gray-600 mb-3">{flower.category}</p>
                  
                  <div className="flex space-x-2">
                    <Button
                      onClick={() => handleAddToCart(flower)}
                      disabled={!isInStock}
                      className="flex-1 bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 text-white text-xs py-2 px-3 disabled:from-gray-300 disabled:to-gray-300"
                    >
                      <ShoppingBagIcon className="w-3 h-3 mr-1" />
                      –í –∫–æ—Ä–∑–∏–Ω—É
                    </Button>
                    <Button
                      onClick={() => handleAddToSubscription(flower)}
                      disabled={!isInStock || !isAuthenticated}
                      variant="outline"
                      className="flex-shrink-0 text-xs py-2 px-3 border-pink-200 text-pink-600 hover:bg-pink-50"
                    >
                      <GiftIcon className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      )}
    </div>
  )

  const renderProfileOrders = () => (
    <div className="space-y-3">
      <div className="bg-gray-50 rounded-lg p-3">
        <div className="flex justify-between items-center mb-2">
          <h4 className="font-semibold text-gray-800">–ó–∞–∫–∞–∑ #ORD-001</h4>
          <Badge className="bg-green-100 text-green-600">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</Badge>
        </div>
        <p className="text-sm text-gray-600 mb-1">–ë—É–∫–µ—Ç —Ä–æ–∑ "–ù–µ–∂–Ω–æ—Å—Ç—å"</p>
        <p className="text-lg font-bold text-pink-600">2,500 ‚ÇΩ</p>
        <p className="text-xs text-gray-400">15 —è–Ω–≤–∞—Ä—è 2025</p>
      </div>
      <div className="bg-gray-50 rounded-lg p-3">
        <div className="flex justify-between items-center mb-2">
          <h4 className="font-semibold text-gray-800">–ó–∞–∫–∞–∑ #ORD-002</h4>
          <Badge className="bg-blue-100 text-blue-600">–í –ø—É—Ç–∏</Badge>
        </div>
        <p className="text-sm text-gray-600 mb-1">–¢—é–ª—å–ø–∞–Ω—ã –º–∏–∫—Å</p>
        <p className="text-lg font-bold text-pink-600">1,800 ‚ÇΩ</p>
        <p className="text-xs text-gray-400">26 —è–Ω–≤–∞—Ä—è 2025</p>
      </div>
    </div>
  )

  const renderProfileHistory = () => (
    <div className="space-y-3">
      <div className="text-center py-8">
        <div className="text-4xl mb-2">üìö</div>
        <h3 className="font-semibold text-gray-800 mb-2">–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</h3>
        <p className="text-gray-600 text-sm">–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π</p>
      </div>
    </div>
  )

  const renderProfileSubscription = () => (
    <div className="space-y-3">
      <div className="text-center py-8">
        <div className="text-4xl mb-2">üìÖ</div>
        <h3 className="font-semibold text-gray-800 mb-2">–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–≤–µ—Ç—ã</h3>
        <p className="text-gray-600 text-sm mb-4">–†–µ–≥—É–ª—è—Ä–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–≤–µ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤</p>
        <Button className="bg-gradient-to-r from-pink-500 to-rose-500 text-white">
          –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        </Button>
      </div>
    </div>
  )

  const renderProfile = () => (
    <div className="p-4">
      <div className="bg-gradient-to-br from-pink-50 to-rose-50 rounded-2xl p-6 mb-6">
        <div className="flex items-center mb-4">
          <div className="w-16 h-16 bg-gradient-to-br from-pink-500 to-rose-500 rounded-full flex items-center justify-center text-white text-xl font-bold mr-4">
            <UserIcon className="w-8 h-8" />
          </div>
          <div>
            <h2 className="text-xl font-bold text-gray-900">–ü—Ä–æ—Ñ–∏–ª—å</h2>
            {isAuthenticated ? (
              <p className="text-gray-600">{user?.full_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram'}</p>
            ) : (
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</p>
            )}
          </div>
        </div>

        {!isAuthenticated && !isTelegramAuthLoading && (
          <div className="space-y-4">
            <p className="text-sm text-gray-600 mb-4">
              {window.Telegram?.WebApp?.initDataUnsafe?.user 
                ? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç'
                : '–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—ã—Ç'
              }
            </p>

            <Button
              onClick={authenticateUser}
              disabled={isTelegramAuthLoading}
              className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white py-4 text-lg font-medium shadow-lg transform transition hover:scale-105"
            >
              <svg className="w-6 h-6 mr-3" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.568 8.16c-.169 1.858-.896 6.728-.896 6.728-.463 1.871-1.724 2.231-3.463 1.402l-1.563-1.095-1.374 1.343c-.132.131-.243.243-.5.243l.178-2.543 5.982-5.406c.258-.23-.057-.357-.4-.126l-7.4 4.662-3.174-.992c-.684-.214-.699-.684.143-1.008L16.58 7.752c.57-.213 1.067.128.987.408z"/>
              </svg>
              {isTelegramAuthLoading ? (
                <div className="flex items-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...
                </div>
              ) : (
                '–í–æ–π—Ç–∏'
              )}
            </Button>
          </div>
        )}

        {isTelegramAuthLoading && (
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-pink-500 mr-3"></div>
            <span className="text-gray-700">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</span>
          </div>
        )}

        {authError && (
          <Alert type="error" className="mb-4">
            {authError}
            <Button 
              onClick={authenticateUser}
              className="mt-2 text-sm"
              variant="outline"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </Alert>
        )}

        {/* ‚úÖ –í–†–ï–ú–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        {/* ‚úÖ –£–±–∏—Ä–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –ø–∞–Ω–µ–ª—å - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ */}

        {/* ‚úÖ –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
        {debugInfo && (
          <div className="mb-4 p-3 bg-gray-100 rounded-lg text-xs">
            <div className="font-bold text-blue-600 mb-2">üîç –û—Ç–ª–∞–¥–∫–∞: {debugInfo.step}</div>
            <div className="text-gray-500 mb-2">–í—Ä–µ–º—è: {debugInfo.timestamp}</div>
            
            {debugInfo.tokens && (
              <div className="mb-2">
                <div className="font-semibold">–¢–æ–∫–µ–Ω—ã:</div>
                <div className="ml-2">
                  <div>Access: {debugInfo.tokens.hasAccessToken ? '‚úÖ' : '‚ùå'} ({debugInfo.tokens.accessTokenLength} —Å–∏–º–≤–æ–ª–æ–≤)</div>
                  <div>Refresh: {debugInfo.tokens.hasRefreshToken ? '‚úÖ' : '‚ùå'} ({debugInfo.tokens.refreshTokenLength} —Å–∏–º–≤–æ–ª–æ–≤)</div>
                  <div>LocalStorage: {debugInfo.tokens.localStorageSupported ? '‚úÖ' : '‚ùå'}</div>
                </div>
              </div>
            )}
            
            {debugInfo.tokenTest && (
              <div className="mb-2">
                <div className="font-semibold">–¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞:</div>
                <div className="ml-2">
                  <div>–°—Ç–∞—Ç—É—Å: {debugInfo.tokenTest.status} ({debugInfo.tokenTest.ok ? '‚úÖ' : '‚ùå'})</div>
                  {debugInfo.tokenTest.error && (
                    <div className="text-red-600">–û—à–∏–±–∫–∞: {JSON.stringify(debugInfo.tokenTest.error)}</div>
                  )}
                </div>
              </div>
            )}
            
            {debugInfo.error && (
              <div className="text-red-600">
                <div className="font-semibold">–û—à–∏–±–∫–∞:</div>
                <div>{debugInfo.error}</div>
              </div>
            )}
            
            <div className="mt-2">
              <div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {isAuthenticated ? '‚úÖ' : '‚ùå'}</div>
              <div>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user?.full_name || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}</div>
            </div>
          </div>
        )}

        {isAuthenticated && user && (
          <div className="space-y-4">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è */}
            <div className="space-y-3">
              <div className="flex justify-between items-center p-3 bg-white/60 rounded-xl">
                <span className="text-sm font-medium text-gray-700">–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã:</span>
                <Badge className="bg-gradient-to-r from-yellow-400 to-orange-400 text-white">
                  {user.bonus_points || 0} –±–∞–ª–ª–æ–≤
                </Badge>
              </div>
            </div>

            {/* –¢–∞–±—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è */}
            <div className="bg-white/60 rounded-xl p-4">
              <div className="flex space-x-1 mb-4">
                <button 
                  onClick={() => setProfileTab('orders')}
                  className={`flex-1 py-2 px-3 rounded-md text-sm font-medium transition-colors ${
                    profileTab === 'orders' 
                      ? 'bg-pink-500 text-white' 
                      : 'text-gray-600 hover:text-pink-600'
                  }`}
                >
                  üì¶ –ó–∞–∫–∞–∑—ã
                </button>
                <button 
                  onClick={() => setProfileTab('history')}
                  className={`flex-1 py-2 px-3 rounded-md text-sm font-medium transition-colors ${
                    profileTab === 'history' 
                      ? 'bg-pink-500 text-white' 
                      : 'text-gray-600 hover:text-pink-600'
                  }`}
                >
                  üìö –ò—Å—Ç–æ—Ä–∏—è
                </button>
                <button 
                  onClick={() => setProfileTab('subscription')}
                  className={`flex-1 py-2 px-3 rounded-md text-sm font-medium transition-colors ${
                    profileTab === 'subscription' 
                      ? 'bg-pink-500 text-white' 
                      : 'text-gray-600 hover:text-pink-600'
                  }`}
                >
                  üìÖ –ü–æ–¥–ø–∏—Å–∫–∞
                </button>
              </div>

              {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤ */}
              <div className="min-h-[200px]">
                {profileTab === 'orders' && renderProfileOrders()}
                {profileTab === 'history' && renderProfileHistory()}
                {profileTab === 'subscription' && renderProfileSubscription()}
              </div>
            </div>
          </div>
        )}
      </div>

      {isAuthenticated && (
        <div className="space-y-4">
          <Card className="p-4">
            <h3 className="font-semibold text-gray-900 mb-2">–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h3>
            <p className="text-sm text-gray-600">–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫</p>
            <Button variant="outline" className="mt-3 w-full">
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã
            </Button>
          </Card>
          
          <Card className="p-4">
            <h3 className="font-semibold text-gray-900 mb-2">–ü–æ–¥–ø–∏—Å–∫–∏</h3>
            <p className="text-sm text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</p>
            <Button variant="outline" className="mt-3 w-full">
              –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            </Button>
          </Card>
        </div>
      )}

      <div className="mt-8 text-center">
        <p className="text-sm text-gray-600 mb-4">
          –ï—â–µ –Ω–µ—Ç Telegram? 
        </p>
        <div className="flex justify-center space-x-4">
          <a 
            href="https://telegram.org/" 
            target="_blank" 
            rel="noopener noreferrer"
            className="text-blue-600 hover:underline text-sm"
          >
            –°–∫–∞—á–∞—Ç—å Telegram
          </a>
          <a 
            href="https://t.me/Flower_Moscow_appbot" 
            target="_blank" 
            rel="noopener noreferrer"
            className="text-blue-600 hover:underline text-sm"
          >
            –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—à –±–æ—Ç
          </a>
        </div>
      </div>
    </div>
  )

  const renderBonuses = () => (
    <div className="p-4">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">üíé –ë–æ–Ω—É—Å—ã</h2>
      <div className="bg-white rounded-xl p-6 shadow-lg mb-4">
        <div className="text-center">
          <div className="text-3xl font-bold text-green-600 mb-2">{user?.bonus_points || 0}</div>
          <div className="text-gray-600">–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã</div>
        </div>
      </div>
      <div className="bg-white rounded-xl p-4 shadow-lg">
        <h3 className="font-semibold mb-3">üéÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</h3>
        <p className="text-gray-600">–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É!</p>
      </div>
    </div>
  )

  const renderNotifications = () => (
    <div className="p-4">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
      <div className="space-y-3">
        <div className="bg-white rounded-xl p-4 shadow-lg">
          <div className="flex items-start gap-3">
            <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
            <div>
              <h3 className="font-semibold">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h3>
              <p className="text-gray-600 text-sm">–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ</p>
              <div className="text-xs text-gray-400 mt-1">–¢–æ–ª—å–∫–æ —á—Ç–æ</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )

  const renderOrders = () => (
    <div className="p-4">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">üì¶ –ó–∞–∫–∞–∑—ã</h2>
      <div className="space-y-3">
        <div className="bg-white rounded-xl p-4 shadow-lg">
          <div className="flex justify-between items-start mb-3">
            <div>
              <h3 className="font-semibold">–ó–∞–∫–∞–∑ #1001</h3>
              <p className="text-gray-600 text-sm">–ë—É–∫–µ—Ç —Ä–æ–∑ "–ù–µ–∂–Ω–æ—Å—Ç—å"</p>
            </div>
            <span className="px-3 py-1 bg-green-100 text-green-600 rounded-full text-sm">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</span>
          </div>
          <div className="text-lg font-bold text-pink-600">2,500 ‚ÇΩ</div>
          <div className="text-xs text-gray-400 mt-1">15 —è–Ω–≤–∞—Ä—è 2025</div>
        </div>
        
        <div className="bg-white rounded-xl p-4 shadow-lg">
          <div className="flex justify-between items-start mb-3">
            <div>
              <h3 className="font-semibold">–ó–∞–∫–∞–∑ #1002</h3>
              <p className="text-gray-600 text-sm">–¢—é–ª—å–ø–∞–Ω—ã –º–∏–∫—Å</p>
            </div>
            <span className="px-3 py-1 bg-blue-100 text-blue-600 rounded-full text-sm">–í –ø—É—Ç–∏</span>
          </div>
          <div className="text-lg font-bold text-pink-600">1,800 ‚ÇΩ</div>
          <div className="text-xs text-gray-400 mt-1">20 —è–Ω–≤–∞—Ä—è 2025</div>
        </div>
      </div>
    </div>
  )

  const handleAddToSubscriptionAPI = async (flowerId: number) => {
    try {
      // Implementation for subscription API call
      console.log('Adding to subscription:', flowerId)
    } catch (error) {
      console.error('Subscription error:', error)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-white to-rose-50">
      {/* Main Content */}
      <div className="pb-16">
        {activeTab === 'catalog' && renderCatalog()}
        {activeTab === 'profile' && renderProfile()}
        {activeTab === 'orders' && renderOrders()}
        {activeTab === 'notifications' && renderNotifications()}
        {activeTab === 'bonuses' && renderBonuses()}
      </div>

      {/* Bottom Navigation */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-2 py-2">
        <div className="flex justify-between items-center overflow-x-auto">
          <button
            onClick={() => setActiveTab('catalog')}
            className={`flex flex-col items-center py-2 px-3 rounded-lg whitespace-nowrap transition-colors ${
              activeTab === 'catalog'
                ? 'text-pink-600 bg-pink-50'
                : 'text-gray-600 hover:text-pink-600'
            }`}
          >
            <FlowerIcon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">–ö–∞—Ç–∞–ª–æ–≥</span>
          </button>
          
          <button
            onClick={() => setActiveTab('orders')}
            className={`flex flex-col items-center py-2 px-3 rounded-lg whitespace-nowrap transition-colors ${
              activeTab === 'orders'
                ? 'text-pink-600 bg-pink-50'
                : 'text-gray-600 hover:text-pink-600'
            }`}
          >
            <ShoppingBagIcon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">–ó–∞–∫–∞–∑—ã</span>
          </button>
          
          <button
            onClick={() => setActiveTab('notifications')}
            className={`flex flex-col items-center py-2 px-3 rounded-lg whitespace-nowrap transition-colors ${
              activeTab === 'notifications'
                ? 'text-pink-600 bg-pink-50'
                : 'text-gray-600 hover:text-pink-600'
            }`}
          >
            <BellIcon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
          </button>
          
          <button
            onClick={() => setActiveTab('bonuses')}
            className={`flex flex-col items-center py-2 px-3 rounded-lg whitespace-nowrap transition-colors ${
              activeTab === 'bonuses'
                ? 'text-pink-600 bg-pink-50'
                : 'text-gray-600 hover:text-pink-600'
            }`}
          >
            <GiftIcon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">–ë–æ–Ω—É—Å—ã</span>
          </button>
          
          <button
            onClick={() => setActiveTab('profile')}
            className={`flex flex-col items-center py-2 px-3 rounded-lg whitespace-nowrap transition-colors ${
              activeTab === 'profile'
                ? 'text-pink-600 bg-pink-50'
                : 'text-gray-600 hover:text-pink-600'
            }`}
          >
            <UserIcon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">–ü—Ä–æ—Ñ–∏–ª—å</span>
          </button>
        </div>
      </div>
    </div>
  )
} 
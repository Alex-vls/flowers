import { useAuthStore } from '@/store'
import { apiClient } from '@/lib/api'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import toast from 'react-hot-toast'
import { User, LoginForm, RegisterForm } from '@/types'

export function useAuth() {
  const { user, isAuthenticated, login, logout, setLoading } = useAuthStore()
  const queryClient = useQueryClient()

  // Get current user profile
  const { data: profile, isLoading: isLoadingProfile } = useQuery({
    queryKey: ['profile'],
    queryFn: async () => {
      const response = await apiClient.getProfile()
      return response.data
    },
    enabled: isAuthenticated,
  })

  // ‚úÖ –ù–û–í–û–ï: Telegram Mini App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const telegramMiniAppMutation = useMutation({
    mutationFn: async (initData: string) => {
      const response = await fetch('/api/v1/auth/telegram-miniapp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          init_data: initData
        })
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      }
      
      return response.json()
    },
    onSuccess: (data) => {
      // Store tokens
      localStorage.setItem('access_token', data.access_token)
      localStorage.setItem('refresh_token', data.refresh_token)
      
      // Update store
      login(data.user, data.access_token)
      
      // Invalidate and refetch profile
      queryClient.invalidateQueries({ queryKey: ['profile'] })
      
      if (data.is_new_user) {
        toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MSK Flower! üå∏')
      } else {
        toast.success('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üå∫')
      }
    },
    onError: (error: any) => {
      const message = error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram'
      toast.error(message)
    },
  })

  // ‚úÖ –ù–û–í–û–ï: Telegram Website –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const telegramWebsiteMutation = useMutation({
    mutationFn: async (telegramData: any) => {
      const response = await fetch('/api/v1/auth/telegram-website', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(telegramData)
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      }
      
      return response.json()
    },
    onSuccess: (data) => {
      // Store tokens
      localStorage.setItem('access_token', data.access_token)
      localStorage.setItem('refresh_token', data.refresh_token)
      
      // Update store
      login(data.user, data.access_token)
      
      // Invalidate and refetch profile
      queryClient.invalidateQueries({ queryKey: ['profile'] })
      
      if (data.is_new_user) {
        toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MSK Flower! üå∏')
      } else {
        toast.success('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üå∫')
      }
    },
    onError: (error: any) => {
      const message = error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram'
      toast.error(message)
    },
  })

  // Login mutation (–æ–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginForm) => {
      const response = await apiClient.login(credentials)
      return response.data
    },
    onSuccess: (data) => {
      // Store tokens
      localStorage.setItem('access_token', data.access_token)
      localStorage.setItem('refresh_token', data.refresh_token)
      
      // Update store
      login(data.user)
      
      // Invalidate and refetch profile
      queryClient.invalidateQueries({ queryKey: ['profile'] })
      
      toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
    },
    onError: (error: any) => {
      const message = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞'
      toast.error(message)
    },
  })

  // Register mutation
  const registerMutation = useMutation({
    mutationFn: async (userData: RegisterForm) => {
      const response = await apiClient.register(userData)
      return response.data
    },
    onSuccess: (data) => {
      // Store tokens
      localStorage.setItem('access_token', data.access_token)
      localStorage.setItem('refresh_token', data.refresh_token)
      
      // Update store
      login(data.user)
      
      // Invalidate and refetch profile
      queryClient.invalidateQueries({ queryKey: ['profile'] })
      
      toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
    },
    onError: (error: any) => {
      const message = error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      toast.error(message)
    },
  })

  // Update profile mutation
  const updateProfileMutation = useMutation({
    mutationFn: async (userData: Partial<User>) => {
      const response = await apiClient.updateProfile(userData)
      return response.data
    },
    onSuccess: (data) => {
      // Update store
      login(data)
      
      // Invalidate and refetch profile
      queryClient.invalidateQueries({ queryKey: ['profile'] })
      
      toast.success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!')
    },
    onError: (error: any) => {
      const message = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
      toast.error(message)
    },
  })

  // Logout function
  const handleLogout = () => {
    logout()
    queryClient.clear()
    toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
  }

  return {
    user: profile || user,
    isAuthenticated,
    isLoadingProfile,
    
    // ‚úÖ –ù–û–í–´–ï –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´
    loginTelegramMiniApp: telegramMiniAppMutation.mutate,
    loginTelegramWebsite: telegramWebsiteMutation.mutate,
    
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
    login: loginMutation.mutate,
    register: registerMutation.mutate,
    updateProfile: updateProfileMutation.mutate,
    logout: handleLogout,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading: loginMutation.isPending || registerMutation.isPending || updateProfileMutation.isPending || telegramMiniAppMutation.isPending || telegramWebsiteMutation.isPending,
    isTelegramAuthLoading: telegramMiniAppMutation.isPending || telegramWebsiteMutation.isPending,
  }
} 
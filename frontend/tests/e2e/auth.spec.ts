import { test, expect } from '@playwright/test'

/**
 * üîê Authentication E2E Tests
 * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

test.describe('Authentication System', () => {
  
  test.beforeEach(async ({ page }) => {
    // –û—á–∏—â–∞–µ–º localStorage –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await page.goto('/')
    await page.evaluate(() => {
      localStorage.clear()
      sessionStorage.clear()
    })
  })

  test('should display login page for unauthenticated users', async ({ page }) => {
    await page.goto('/profile')
    
    // –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    await expect(page).toHaveURL('/login')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
  })

  test('should authenticate via Telegram test login', async ({ page }) => {
    await page.goto('/login')
    
    // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    await page.click('[data-testid="telegram-test-login"]')
    
    // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await expect(page).toHaveURL('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    await expect(page.locator('[data-testid="user-profile-button"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    const token = await page.evaluate(() => localStorage.getItem('access_token'))
    expect(token).toBeTruthy()
  })

  test('should maintain authentication after page reload', async ({ page }) => {
    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    await page.goto('/login')
    await page.click('[data-testid="telegram-test-login"]')
    await expect(page).toHaveURL('/')
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.reload()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
    await expect(page.locator('[data-testid="user-profile-button"]')).toBeVisible()
  })

  test('should logout user and clear tokens', async ({ page }) => {
    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    await page.goto('/login')
    await page.click('[data-testid="telegram-test-login"]')
    await expect(page).toHaveURL('/')
    
    // –í—ã—Ö–æ–¥–∏–º
    await page.click('[data-testid="user-profile-button"]')
    await page.click('[data-testid="logout-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ —Ç–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã
    await expect(page).toHaveURL('/')
    
    const token = await page.evaluate(() => localStorage.getItem('access_token'))
    expect(token).toBeNull()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    await expect(page.locator('[data-testid="login-button"]')).toBeVisible()
  })

  test('should handle expired token gracefully', async ({ page }) => {
    await page.goto('/')
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω
    await page.evaluate(() => {
      localStorage.setItem('access_token', 'expired.token.here')
      localStorage.setItem('auth-storage', JSON.stringify({
        state: {
          user: { id: 1, full_name: 'Test User', role: 'client' }
        }
      }))
    })
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.reload()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –±—ã–ª –æ—á–∏—â–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    const token = await page.evaluate(() => localStorage.getItem('access_token'))
    expect(token).toBeNull()
    
    await expect(page.locator('[data-testid="login-button"]')).toBeVisible()
  })

  test('should redirect admin users to admin panel', async ({ page }) => {
    await page.goto('/login')
    
    // –ú–æ–∫–∞–µ–º –∞–¥–º–∏–Ω–∞
    await page.evaluate(() => {
      // –ú–æ–∫–∞–µ–º API –æ—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
      window.fetch = async (url, options) => {
        if (url.includes('/auth/telegram-auth')) {
          return {
            ok: true,
            json: async () => ({
              access_token: 'admin.token.here',
              refresh_token: 'admin.refresh.here',
              user: {
                id: 1,
                full_name: 'Admin User',
                role: 'admin',
                is_verified: true,
                bonus_points: 0
              }
            })
          }
        }
        return fetch(url, options)
      }
    })
    
    await page.click('[data-testid="telegram-test-login"]')
    
    // –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    await expect(page).toHaveURL('/admin')
  })
})

test.describe('Authentication API Integration', () => {
  
  test('should handle network errors gracefully', async ({ page }) => {
    await page.goto('/login')
    
    // –ú–æ–∫–∞–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
    await page.route('**/api/v1/auth/telegram-auth', route => {
      route.abort('failed')
    })
    
    await page.click('[data-testid="telegram-test-login"]')
    
    // –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    await expect(page.locator('[data-testid="auth-error"]')).toBeVisible()
    await expect(page.locator('[data-testid="auth-error"]')).toContainText('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
  })

  test('should handle invalid credentials', async ({ page }) => {
    await page.goto('/login')
    
    // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É 401
    await page.route('**/api/v1/auth/telegram-auth', route => {
      route.fulfill({
        status: 401,
        contentType: 'application/json',
        body: JSON.stringify({ detail: 'Invalid credentials' })
      })
    })
    
    await page.click('[data-testid="telegram-test-login"]')
    
    // –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    await expect(page.locator('[data-testid="auth-error"]')).toBeVisible()
  })

  test('should handle rate limiting', async ({ page }) => {
    await page.goto('/login')
    
    // –ú–æ–∫–∞–µ–º rate limit –æ—à–∏–±–∫—É
    await page.route('**/api/v1/auth/telegram-auth', route => {
      route.fulfill({
        status: 429,
        contentType: 'application/json',
        body: JSON.stringify({ 
          detail: 'Rate limit exceeded. Try again in 60 seconds.' 
        }),
        headers: {
          'Retry-After': '60'
        }
      })
    })
    
    await page.click('[data-testid="telegram-test-login"]')
    
    // –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ rate limit
    await expect(page.locator('[data-testid="auth-error"]')).toBeVisible()
    await expect(page.locator('[data-testid="auth-error"]')).toContainText('Rate limit exceeded')
  })
}) 
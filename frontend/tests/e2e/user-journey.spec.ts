import { test, expect } from '@playwright/test'

/**
 * üõí User Journey E2E Tests
 * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏ –ø–æ–∫—É–ø–∫–∏
 */

// Helper function –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function authenticateUser(page) {
  await page.goto('/login')
  await page.click('[data-testid="telegram-test-login"]')
  await expect(page).toHaveURL('/')
}

test.describe('Complete Purchase Journey', () => {
  
  test('should complete full purchase flow: catalog ‚Üí product ‚Üí cart ‚Üí order', async ({ page }) => {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await authenticateUser(page)
    
    // 2. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥
    await page.goto('/catalog')
    await expect(page.locator('[data-testid="catalog-title"]')).toBeVisible()
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤
    await expect(page.locator('[data-testid="flower-card"]').first()).toBeVisible()
    
    // 3. –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∫–∞
    const firstFlower = page.locator('[data-testid="flower-card"]').first()
    const flowerName = await firstFlower.locator('[data-testid="flower-name"]').textContent()
    
    await firstFlower.click()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
    await expect(page.locator('[data-testid="flower-detail"]')).toBeVisible()
    await expect(page.locator('[data-testid="flower-title"]')).toContainText(flowerName)
    
    // 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    await page.click('[data-testid="add-to-cart"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –æ–±–Ω–æ–≤–∏–ª—Å—è
    await expect(page.locator('[data-testid="cart-count"]')).toHaveText('1')
    
    // 5. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É
    await page.click('[data-testid="cart-button"]')
    await expect(page).toHaveURL('/cart')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    await expect(page.locator('[data-testid="cart-item"]')).toHaveCount(1)
    await expect(page.locator('[data-testid="cart-item-name"]')).toContainText(flowerName)
    
    // 6. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await page.click('[data-testid="quantity-increase"]')
    await expect(page.locator('[data-testid="quantity-input"]')).toHaveValue('2')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—â–∞—è —Å—É–º–º–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
    const totalElement = page.locator('[data-testid="cart-total"]')
    await expect(totalElement).toBeVisible()
    
    // 7. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await page.click('[data-testid="checkout-button"]')
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–æ—Å—Ç–∞–≤–∫–∏
    await page.fill('[data-testid="delivery-address"]', '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1')
    await page.fill('[data-testid="delivery-phone"]', '+7 (999) 123-45-67')
    await page.selectOption('[data-testid="delivery-time"]', 'morning')
    
    // –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–∑–∞–≤—Ç—Ä–∞)
    const tomorrow = new Date()
    tomorrow.setDate(tomorrow.getDate() + 1)
    const tomorrowStr = tomorrow.toISOString().split('T')[0]
    await page.fill('[data-testid="delivery-date"]', tomorrowStr)
    
    // 8. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await page.click('[data-testid="place-order"]')
    
    // 9. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await expect(page.locator('[data-testid="order-success"]')).toBeVisible()
    await expect(page.locator('[data-testid="order-number"]')).toBeVisible()
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = await page.locator('[data-testid="order-number"]').textContent()
    expect(orderNumber).toMatch(/FL-\d{8}-[A-Z0-9]{8}/)
    
    // 10. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–∫–∞–∑–∞–º
    await page.click('[data-testid="view-orders"]')
    await expect(page).toHaveURL('/orders')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
    await expect(page.locator('[data-testid="order-item"]').first()).toBeVisible()
    await expect(page.locator('[data-testid="order-item"]').first()).toContainText(orderNumber)
  })

  test('should handle empty cart checkout attempt', async ({ page }) => {
    await authenticateUser(page)
    
    await page.goto('/cart')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
    await expect(page.locator('[data-testid="empty-cart"]')).toBeVisible()
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    await expect(page.locator('[data-testid="checkout-button"]')).toBeDisabled()
  })

  test('should validate delivery form fields', async ({ page }) => {
    await authenticateUser(page)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    await page.goto('/catalog')
    await page.locator('[data-testid="flower-card"]').first().click()
    await page.click('[data-testid="add-to-cart"]')
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
    await page.goto('/cart')
    await page.click('[data-testid="checkout-button"]')
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    await page.click('[data-testid="place-order"]')
    
    // –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await expect(page.locator('[data-testid="address-error"]')).toBeVisible()
    await expect(page.locator('[data-testid="phone-error"]')).toBeVisible()
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    await page.fill('[data-testid="delivery-phone"]', '123')
    await page.click('[data-testid="place-order"]')
    
    await expect(page.locator('[data-testid="phone-error"]')).toContainText('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
  })

  test('should apply and remove bonus points', async ({ page }) => {
    await authenticateUser(page)
    
    // –ú–æ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–Ω—É—Å–∞–º–∏
    await page.evaluate(() => {
      localStorage.setItem('auth-storage', JSON.stringify({
        state: {
          user: { 
            id: 1, 
            full_name: 'Test User', 
            role: 'client',
            bonus_points: 500 
          }
        }
      }))
    })
    
    await page.reload()
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    await page.goto('/catalog')
    await page.locator('[data-testid="flower-card"]').first().click()
    await page.click('[data-testid="add-to-cart"]')
    
    await page.goto('/cart')
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
    await page.click('[data-testid="use-bonus-toggle"]')
    await page.fill('[data-testid="bonus-amount"]', '100')
    await page.click('[data-testid="apply-bonus"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–∏–ª–∞—Å—å
    await expect(page.locator('[data-testid="bonus-discount"]')).toContainText('100 ‚ÇΩ')
    
    // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å—ã
    await page.click('[data-testid="remove-bonus"]')
    await expect(page.locator('[data-testid="bonus-discount"]')).not.toBeVisible()
  })
})

test.describe('Subscription Journey', () => {
  
  test('should create weekly flower subscription', async ({ page }) => {
    await authenticateUser(page)
    
    await page.goto('/subscription')
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await page.click('[data-testid="create-subscription"]')
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await page.selectOption('[data-testid="frequency-select"]', 'weekly')
    await page.selectOption('[data-testid="day-select"]', 'monday')
    await page.selectOption('[data-testid="time-select"]', 'morning')
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç—ã
    await page.click('[data-testid="flower-option"]').first()
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å
    await page.fill('[data-testid="subscription-address"]', '—É–ª. –ü–æ–¥–ø–∏—Å–Ω–∞—è, –¥. 2')
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await page.click('[data-testid="save-subscription"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    await expect(page.locator('[data-testid="subscription-created"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscription-status"]')).toContainText('–ê–∫—Ç–∏–≤–Ω–∞')
  })

  test('should pause and resume subscription', async ({ page }) => {
    await authenticateUser(page)
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
    await page.goto('/subscription')
    
    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await page.click('[data-testid="pause-subscription"]')
    await page.click('[data-testid="confirm-pause"]')
    
    await expect(page.locator('[data-testid="subscription-status"]')).toContainText('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    
    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await page.click('[data-testid="resume-subscription"]')
    await page.click('[data-testid="confirm-resume"]')
    
    await expect(page.locator('[data-testid="subscription-status"]')).toContainText('–ê–∫—Ç–∏–≤–Ω–∞')
  })
})

test.describe('Error Handling', () => {
  
  test('should handle API errors during checkout', async ({ page }) => {
    await authenticateUser(page)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    await page.goto('/catalog')
    await page.locator('[data-testid="flower-card"]').first().click()
    await page.click('[data-testid="add-to-cart"]')
    
    await page.goto('/cart')
    await page.click('[data-testid="checkout-button"]')
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.fill('[data-testid="delivery-address"]', '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1')
    await page.fill('[data-testid="delivery-phone"]', '+7 (999) 123-45-67')
    
    // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É API
    await page.route('**/api/v1/orders/', route => {
      route.fulfill({
        status: 500,
        contentType: 'application/json',
        body: JSON.stringify({ detail: 'Internal server error' })
      })
    })
    
    await page.click('[data-testid="place-order"]')
    
    // –î–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –æ—à–∏–±–∫–∞
    await expect(page.locator('[data-testid="order-error"]')).toBeVisible()
    await expect(page.locator('[data-testid="order-error"]')).toContainText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
  })

  test('should handle network connectivity issues', async ({ page }) => {
    await authenticateUser(page)
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–µ—Ç—å
    await page.context().setOffline(true)
    
    await page.goto('/catalog')
    
    // –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
    await expect(page.locator('[data-testid="network-error"]')).toBeVisible()
    
    // –í–∫–ª—é—á–∞–µ–º —Å–µ—Ç—å
    await page.context().setOffline(false)
    
    // –ù–∞–∂–∏–º–∞–µ–º "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
    await page.click('[data-testid="retry-button"]')
    
    // –ö–∞—Ç–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    await expect(page.locator('[data-testid="flower-card"]').first()).toBeVisible()
  })
}) 
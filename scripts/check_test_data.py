#!/usr/bin/env python3
"""
FlowerPunk Test Data Checker
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
"""

import psycopg2
import os
from datetime import datetime

# Database connection settings
DB_CONFIG = {
    'host': os.getenv('POSTGRES_HOST', 'localhost'),
    'port': os.getenv('POSTGRES_PORT', '5432'),
    'database': os.getenv('POSTGRES_DB', 'flower_db'),
    'user': os.getenv('POSTGRES_USER', 'flower_user'),
    'password': os.getenv('POSTGRES_PASSWORD', 'flower_password')
}

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_table_data(conn, table_name, expected_count=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        cursor = conn.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        
        status = "‚úÖ" if count > 0 else "‚ùå"
        if expected_count:
            status = "‚úÖ" if count >= expected_count else "‚ö†Ô∏è"
        
        print(f"{status} {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        if count > 0:
            cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
            rows = cursor.fetchall()
            for i, row in enumerate(rows, 1):
                print(f"   –ü—Ä–∏–º–µ—Ä {i}: {row[:3]}...")  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è
        
        cursor.close()
        return count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return 0

def check_flowers_data(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤"""
    print("\nüåπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤:")
    try:
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) FROM flowers")
        total = cursor.fetchone()[0]
        print(f"‚úÖ –í—Å–µ–≥–æ —Ü–≤–µ—Ç–æ–≤: {total}")
        
        # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor.execute("""
            SELECT category, COUNT(*) 
            FROM flowers 
            GROUP BY category 
            ORDER BY COUNT(*) DESC
        """)
        categories = cursor.fetchall()
        print("üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in categories:
            print(f"   {category}: {count}")
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç—ã
        cursor.execute("SELECT COUNT(*) FROM flowers WHERE is_available = true")
        available = cursor.fetchone()[0]
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {available}")
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã
        cursor.execute("SELECT COUNT(*) FROM flowers WHERE is_seasonal = true")
        seasonal = cursor.fetchone()[0]
        print(f"üå± –°–µ–∑–æ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {seasonal}")
        
        # –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        cursor.execute("SELECT MIN(price), MAX(price), AVG(price) FROM flowers")
        min_price, max_price, avg_price = cursor.fetchone()
        print(f"üí∞ –¶–µ–Ω—ã: {min_price}‚ÇΩ - {max_price}‚ÇΩ (—Å—Ä–µ–¥–Ω—è—è: {avg_price:.0f}‚ÇΩ)")
        
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–æ–≤: {e}")

def check_users_data(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    try:
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) FROM users")
        total = cursor.fetchone()[0]
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
        
        # –ü–æ —Ä–æ–ª—è–º
        cursor.execute("""
            SELECT role, COUNT(*) 
            FROM users 
            GROUP BY role 
            ORDER BY COUNT(*) DESC
        """)
        roles = cursor.fetchall()
        print("üìä –ü–æ —Ä–æ–ª—è–º:")
        for role, count in roles:
            print(f"   {role}: {count}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_active = true")
        active = cursor.fetchone()[0]
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active}")
        
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_verified = true")
        verified = cursor.fetchone()[0]
        print(f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {verified}")
        
        # –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã
        cursor.execute("SELECT SUM(bonus_points) FROM users")
        total_bonus = cursor.fetchone()[0]
        print(f"üéÅ –í—Å–µ–≥–æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {total_bonus}")
        
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def check_orders_data(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤:")
    try:
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) FROM orders")
        total = cursor.fetchone()[0]
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total}")
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute("""
            SELECT status, COUNT(*) 
            FROM orders 
            GROUP BY status 
            ORDER BY COUNT(*) DESC
        """)
        statuses = cursor.fetchall()
        print("üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in statuses:
            print(f"   {status}: {count}")
        
        # –ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
        cursor.execute("""
            SELECT payment_method, COUNT(*) 
            FROM orders 
            GROUP BY payment_method 
            ORDER BY COUNT(*) DESC
        """)
        payments = cursor.fetchall()
        print("üí≥ –ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:")
        for method, count in payments:
            print(f"   {method}: {count}")
        
        # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute("SELECT SUM(total_amount) FROM orders")
        total_amount = cursor.fetchone()[0]
        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_amount}‚ÇΩ")
        
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

def check_schema_org_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Schema.org endpoints"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Schema.org endpoints:")
    
    import requests
    
    base_url = "http://localhost:8000"
    endpoints = [
        "/sitemap.xml",
        "/robots.txt",
        "/structured-data/homepage",
        "/structured-data/catalog"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {endpoint} - OK")
            else:
                print(f"‚ùå {endpoint} - HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint} - –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé∏ FlowerPunk Test Data Checker")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    conn = connect_db()
    if not conn:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        check_table_data(conn, "users", 8)
        check_table_data(conn, "flowers", 15)
        check_table_data(conn, "orders", 10)
        check_table_data(conn, "order_items", 10)
        check_table_data(conn, "subscriptions", 6)
        check_table_data(conn, "reviews", 10)
        check_table_data(conn, "payments", 6)
        check_table_data(conn, "bonuses", 8)
        check_table_data(conn, "notifications", 9)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_flowers_data(conn)
        check_users_data(conn)
        check_orders_data(conn)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Schema.org endpoints
        check_schema_org_endpoints()
        
        print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    finally:
        conn.close()

if __name__ == "__main__":
    main() 
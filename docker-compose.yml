version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flower_postgres
    environment:
      POSTGRES_DB: flower_db
      POSTGRES_USER: flower_user
      POSTGRES_PASSWORD: flower_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - flower_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flower_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - flower_network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flower_backend
    environment:
      - DATABASE_URL=postgresql://flower_user:flower_password@postgres:5432/flower_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here
      - TELEGRAM_BOT_TOKEN=8463349994:AAGKX7FzQk5r5pBrGo0QV6udB41jza4OnkY
      - TELEGRAM_WEBHOOK_URL=https://your-domain.com/api/v1/telegram/webhook
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - YOOMONEY_TOKEN=${YOOMONEY_TOKEN}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - flower_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

    # React Frontend  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod.fixed
    container_name: flower_frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
    # ports:
    #   - "3000:80"  # Frontend доступен только внутри Docker network
    depends_on:
      - backend
    networks:
      - flower_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: flower_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - frontend_build:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - flower_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: flower_prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - flower_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: flower_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - flower_network
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: flower_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - flower_network
    restart: unless-stopped

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: flower_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - flower_network
    restart: unless-stopped

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: flower_logstash
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - flower_network
    restart: unless-stopped

  # E2E Tests service
  e2e-tests:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    environment:
      - BASE_URL=http://nginx
      - CI=true
    depends_on:
      - nginx
      - backend
      - frontend
    networks:
      - flower_network
    volumes:
      - ./frontend/test-results:/app/test-results
    profiles:
      - testing

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  frontend_build:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  flower_network:
    driver: bridge 
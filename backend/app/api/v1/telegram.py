from fastapi import APIRouter, HTTPException, Depends, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Optional, List
import httpx
import json
import logging
from sqlalchemy.orm import Session
from app.core.config import settings
from app.core.database import get_db
from app.core.security import get_current_user
from app.models.user import User
from app.models.flower import Flower
from app.models.subscription import Subscription
from app.models.order import Order
from app.crud.crud_user import crud_user
from app.crud.crud_flower import crud_flower
from app.crud.crud_subscription import crud_subscription
from app.crud.crud_order import crud_order
from app.schemas.telegram import TelegramUpdate, TelegramMessage, TelegramInlineKeyboard

router = APIRouter()
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.token}"
    
    async def send_message(self, chat_id: int, text: str, reply_markup: Optional[dict] = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        async with httpx.AsyncClient() as client:
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            if reply_markup:
                payload["reply_markup"] = reply_markup
            
            response = await client.post(f"{self.api_url}/sendMessage", json=payload)
            return response.json()
    
    async def send_photo(self, chat_id: int, photo: str, caption: str = "", reply_markup: Optional[dict] = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ Telegram"""
        async with httpx.AsyncClient() as client:
            payload = {
                "chat_id": chat_id,
                "photo": photo,
                "caption": caption,
                "parse_mode": "HTML"
            }
            if reply_markup:
                payload["reply_markup"] = reply_markup
            
            response = await client.post(f"{self.api_url}/sendPhoto", json=payload)
            return response.json()
    
    async def answer_callback_query(self, callback_query_id: str, text: str = "", show_alert: bool = False):
        """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query"""
        async with httpx.AsyncClient() as client:
            payload = {
                "callback_query_id": callback_query_id,
                "text": text,
                "show_alert": show_alert
            }
            response = await client.post(f"{self.api_url}/answerCallbackQuery", json=payload)
            return response.json()
    
    async def set_webhook(self, url: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook"""
        async with httpx.AsyncClient() as client:
            payload = {"url": url}
            response = await client.post(f"{self.api_url}/setWebhook", json=payload)
            return response.json()

bot = TelegramBot()

async def send_welcome_message_on_login(user: User, is_new_user: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ"""
    if not user.telegram_id:
        logger.info(f"User {user.id} has no telegram_id, skipping welcome message")
        return
    
    try:
        if is_new_user:
            welcome_text = f"""
üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!</b> üå∏

üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ MSK Flower!</b>

–í—ã —Å—Ç–∞–ª–∏ —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ punk rock —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ª—é–±–∏—Ç–µ–ª–µ–π —Ü–≤–µ—Ç–æ–≤!

<b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>
‚Ä¢ üåπ –°–≤–µ–∂–∏–µ —Ü–≤–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ üìÖ –ì–∏–±–∫–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
‚Ä¢ üì¶ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üí≥ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏ —Å–∫–∏–¥–∫–∏
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{user.bonus_points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b>

<i>–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞! üëá</i>
            """
        else:
            welcome_text = f"""
üå∏ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!</b> üå∏

–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ MSK Flower!

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º punk rock –º–∏—Ä–µ —Ü–≤–µ—Ç–æ–≤! üé∏

<b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>
‚Ä¢ üí≥ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{user.bonus_points} –±–∞–ª–ª–æ–≤</b>
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∞–∫—Ç–∏–≤–Ω—ã
‚Ä¢ üöÄ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–∞–º!

<i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å –º–∏—Ä —è—Ä—á–µ! üëá</i>
            """
        
        # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"
        reply_markup = {
            "inline_keyboard": [
                [
                    {
                        "text": "üå∫ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                        "url": "https://msk-flower.su"
                    }
                ],
                [
                    {
                        "text": "üåπ –ö–∞—Ç–∞–ª–æ–≥",
                        "url": "https://msk-flower.su/catalog"
                    },
                    {
                        "text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
                        "url": "https://msk-flower.su/profile"
                    }
                ]
            ]
        }
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await bot.send_message(
            chat_id=int(user.telegram_id),
            text=welcome_text,
            reply_markup=reply_markup
        )
        
        user_type = "new" if is_new_user else "existing"
        logger.info(f"Welcome message sent to {user_type} user {user.id} (telegram_id: {user.telegram_id})")
        return result
        
    except Exception as e:
        logger.error(f"Failed to send welcome message to user {user.id}: {e}")
        return None

def create_main_menu():
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return {
        "keyboard": [
            [{"text": "üåπ –ö–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤"}],
            [{"text": "üìÖ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"}, {"text": "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"}],
            [{"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å"}, {"text": "üí≥ –ö–æ—Ä–∑–∏–Ω–∞"}],
            [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}, {"text": "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_catalog_menu():
    """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞"""
    return {
        "inline_keyboard": [
            [
                {"text": "üåπ –†–æ–∑—ã", "callback_data": "catalog_roses"},
                {"text": "üå∑ –¢—é–ª—å–ø–∞–Ω—ã", "callback_data": "catalog_tulips"}
            ],
            [
                {"text": "üå∏ –õ–∏–ª–∏–∏", "callback_data": "catalog_lilies"},
                {"text": "üåº –•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã", "callback_data": "catalog_chrysanthemums"}
            ],
            [
                {"text": "üå∫ –ì–≤–æ–∑–¥–∏–∫–∏", "callback_data": "catalog_carnations"},
                {"text": "üíê –°–º–µ—à–∞–Ω–Ω—ã–µ", "callback_data": "catalog_mixed"}
            ],
            [
                {"text": "üçÉ –°–µ–∑–æ–Ω–Ω—ã–µ", "callback_data": "catalog_seasonal"}
            ],
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main_menu"}
            ]
        ]
    }

@router.post("/webhook")
async def telegram_webhook(request: Request):
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = TelegramUpdate(**data)
        
        if update.message:
            await handle_message(update.message)
        elif update.callback_query:
            await handle_callback_query(update.callback_query)
        
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return JSONResponse(content={"ok": False, "error": str(e)})

async def handle_message(message: TelegramMessage):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    from app.core.database import SessionLocal
    
    chat_id = message.chat.id
    text = message.text or ""
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = crud_user.get_by_telegram_id(db, str(chat_id))
        
        if not user:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            welcome_text = """
üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MSK Flower!</b> üå∏

–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–µ–∂–∏–µ —Ü–≤–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä—è–º–æ –∫ –≤–∞—à–µ–º—É —Å—Ç–æ–ª—É.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ:
https://msk-flower.su/register

–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å –±–æ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É:
/link <–≤–∞—à_email>
            """
            await bot.send_message(chat_id, welcome_text, create_main_menu())
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith("/"):
            await handle_command(message, user, db)
        else:
            await handle_text_message(message, user, db)
    finally:
        db.close()

async def handle_command(message: TelegramMessage, user: User, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"""
    chat_id = message.chat.id
    text = message.text
    
    if text == "/start":
        welcome_text = f"""
üå∏ <b>–ü—Ä–∏–≤–µ—Ç, {user.full_name}!</b> üå∏

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MSK Flower Bot!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        await bot.send_message(chat_id, welcome_text, create_main_menu())
    
    elif text == "/link":
        # –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å Telegram
        await bot.send_message(chat_id, "–î–ª—è —Å–≤—è–∑–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/link your@email.com")
    
    elif text.startswith("/link "):
        email = text.split(" ", 1)[1]
        # –õ–æ–≥–∏–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        await bot.send_message(chat_id, f"–ê–∫–∫–∞—É–Ω—Ç {email} —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –±–æ—Ç–æ–º!")
    
    elif text == "üåπ –ö–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤":
        await show_catalog(message.chat.id)
    
    elif text == "üìÖ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        await show_subscriptions(message.chat.id, user.id, db)
    
    elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        await show_orders(message.chat.id, user.id, db)
    
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await show_profile(message.chat.id, user)
    
    elif text == "üí≥ –ö–æ—Ä–∑–∏–Ω–∞":
        await show_cart(message.chat.id, user.id)
    
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await show_help(message.chat.id)
    
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        support_text = """
üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ MSK Flower</b>

‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
‚Ä¢ Email: info@msk-flower.su
‚Ä¢ Telegram: @Flower_Moscow_appbot
‚Ä¢ –°–∞–π—Ç: https://msk-flower.su

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:00 - 22:00
        """
        await bot.send_message(chat_id, support_text)

async def handle_text_message(message: TelegramMessage, user: User, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = message.chat.id
    text = message.text
    
    # –ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤
    if "—Ü–≤–µ—Ç—ã" in text.lower() or "–±—É–∫–µ—Ç" in text.lower():
        await show_catalog(chat_id)
    else:
        await bot.send_message(chat_id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

async def handle_callback_query(callback_query):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query"""
    chat_id = callback_query.message.chat.id
    data = callback_query.data
    
    if data == "main_menu":
        await bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", create_main_menu())
    
    elif data.startswith("catalog_"):
        category = data.split("_", 1)[1]
        await show_category_flowers(chat_id, category)
    
    elif data.startswith("flower_"):
        flower_id = int(data.split("_", 1)[1])
        await show_flower_details(chat_id, flower_id)
    
    elif data.startswith("add_to_cart_"):
        flower_id = int(data.split("_", 3)[3])
        await add_to_cart(chat_id, flower_id)
    
    # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query
    await bot.answer_callback_query(callback_query.id)

async def show_catalog(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥"""
    text = """
üåπ <b>–ö–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
    """
    await bot.send_message(chat_id, text, create_catalog_menu())

async def show_category_flowers(chat_id: int, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    from app.core.database import SessionLocal
    
    db = SessionLocal()
    try:
        flowers = crud_flower.get_by_category(db, category, limit=5)
        
        if not flowers:
            await bot.send_message(chat_id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ü–≤–µ—Ç–æ–≤.")
            return
        
        text = f"üåπ <b>–¶–≤–µ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'</b>\n\n"
        
        keyboard = []
        for flower in flowers:
            text += f"‚Ä¢ {flower.name} - {flower.price} ‚ÇΩ\n"
            keyboard.append([{
                "text": f"üåπ {flower.name}",
                "callback_data": f"flower_{flower.id}"
            }])
        
        keyboard.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main_menu"}])
        
        await bot.send_message(chat_id, text, {"inline_keyboard": keyboard})
    finally:
        db.close()

async def show_flower_details(chat_id: int, flower_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ü–≤–µ—Ç–∫–∞"""
    from app.core.database import SessionLocal
    
    db = SessionLocal()
    try:
        flower = crud_flower.get(db, flower_id)
        if not flower:
            await bot.send_message(chat_id, "–¶–≤–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        text = f"""
üåπ <b>{flower.name}</b>

{flower.description}

üí∞ –¶–µ–Ω–∞: {flower.price} ‚ÇΩ
üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {flower.stock_quantity} —à—Ç.
        """
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", "callback_data": f"add_to_cart_{flower_id}"}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main_menu"}]
            ]
        }
        
        if flower.image_url:
            await bot.send_photo(chat_id, flower.image_url, text, keyboard)
        else:
            await bot.send_message(chat_id, text, keyboard)
    finally:
        db.close()

async def show_subscriptions(chat_id: int, user_id: int, db: Session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    subscriptions = crud_subscription.get_by_user(db, user_id)
    
    if not subscriptions:
        text = """
üìÖ <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.

–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∞–π—Ç–µ:
https://msk-flower.su/subscription
        """
    else:
        text = "üìÖ <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        for sub in subscriptions:
            status_emoji = "üü¢" if sub.status == "active" else "üü°" if sub.status == "paused" else "üî¥"
            text += f"{status_emoji} {sub.name} - {sub.status}\n"
    
    await bot.send_message(chat_id, text)

async def show_orders(chat_id: int, user_id: int, db: Session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    orders = crud_order.get_by_user(db, user_id, limit=5)
    
    if not orders:
        text = """
üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.

–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑:
https://msk-flower.su/catalog
        """
    else:
        text = "üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
        for order in orders:
            status_emoji = "üü¢" if order.status == "delivered" else "üü°" if order.status == "delivering" else "üî¥"
            text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.order_number} - {order.status}\n"
    
    await bot.send_message(chat_id, text)

async def show_profile(chat_id: int, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>

–ò–º—è: {user.full_name}
Email: {user.email}
–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã: {user.bonus_points}
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {'‚úÖ' if user.is_verified else '‚ùå'}

–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:
https://msk-flower.su/profile
    """
    await bot.send_message(chat_id, text)

async def show_cart(chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    text = """
üí≥ <b>–ö–æ—Ä–∑–∏–Ω–∞</b>

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:
https://msk-flower.su/cart
    """
    await bot.send_message(chat_id, text)

async def show_help(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    text = """
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/link - –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ
2. –°–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –±–æ—Ç–æ–º
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
@Flower_Moscow_appbot
    """
    await bot.send_message(chat_id, text)

async def add_to_cart(chat_id: int, flower_id: int):
    """–î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    await bot.send_message(chat_id, "üåπ –¶–≤–µ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: https://msk-flower.su/cart")

@router.post("/set-webhook")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è –±–æ—Ç–∞"""
    try:
        result = await bot.set_webhook(settings.TELEGRAM_WEBHOOK_URL)
        return {"success": True, "result": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/webhook-info")
async def get_webhook_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{bot.api_url}/getWebhookInfo")
        return response.json() 
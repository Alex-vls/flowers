"""
üìä Monitoring API Endpoints
API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

from typing import Any, Dict, List
from fastapi import APIRouter, Depends, HTTPException, status, Request
from sqlalchemy.orm import Session
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
from datetime import datetime
import logging
import json

from app.core.database import get_db
from app.api.v1.deps import get_current_admin_user
from app.models.user import User
from app.core.monitoring import (
    get_system_health,
    get_system_metrics,
    alert_manager,
    create_alert,
    AlertLevel
)
from app.core.rate_limiter import rate_limit

router = APIRouter()
logger = logging.getLogger(__name__)

# –°—Ö–µ–º—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
class TelegramDiagnosticLog(BaseModel):
    """–õ–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç Telegram Mini App"""
    timestamp: str
    level: str  # 'info', 'warn', 'error'
    message: str
    data: Optional[Dict[str, Any]] = None
    user_agent: Optional[str] = None
    telegram_user_id: Optional[str] = None
    session_id: Optional[str] = None

class DiagnosticReport(BaseModel):
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logs: List[TelegramDiagnosticLog]
    environment: Dict[str, Any]
    user_info: Optional[Dict[str, Any]] = None

@router.post("/telegram-diagnostics")
@rate_limit("diagnostics")
def submit_telegram_diagnostics(
    request: Request,
    report: DiagnosticReport,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App
    –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        client_ip = request.client.host if request.client else "unknown"
        user_agent = request.headers.get("user-agent", "unknown")
        
        logger.info(f"üìä Telegram diagnostics received from {client_ip}")
        logger.info(f"üåê Environment: {json.dumps(report.environment, ensure_ascii=False)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        for log_entry in report.logs:
            log_level = getattr(logger, log_entry.level.lower(), logger.info)
            
            log_message = f"[TELEGRAM-{log_entry.level.upper()}] {log_entry.message}"
            if log_entry.data:
                log_message += f" | Data: {json.dumps(log_entry.data, ensure_ascii=False)}"
            
            if log_entry.telegram_user_id:
                log_message += f" | TG User: {log_entry.telegram_user_id}"
                
            log_level(log_message)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_errors = [
            log for log in report.logs 
            if log.level == 'error' and ('auth' in log.message.lower() or '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü' in log.message.lower())
        ]
        
        if auth_errors:
            logger.error(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –≤ Telegram Mini App:")
            for error in auth_errors:
                logger.error(f"   - {error.message}")
                if error.data:
                    logger.error(f"     –î–∞–Ω–Ω—ã–µ: {json.dumps(error.data, ensure_ascii=False)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è initData
        if not report.environment.get('windowTelegramWebApp') or report.environment.get('initData') == '–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ':
            issues.append("‚ùå Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –∫–∞–∫ Mini App")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if report.environment.get('initDataUnsafe') == '–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ':
            issues.append("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        if not report.environment.get('isTelegramBrowser'):
            issues.append("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –≤ Telegram –±—Ä–∞—É–∑–µ—Ä–µ")
        
        if issues:
            logger.warning("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for issue in issues:
                logger.warning(f"   {issue}")
        
        return {
            "status": "received",
            "logs_processed": len(report.logs),
            "issues_detected": len(issues),
            "recommendations": generate_recommendations(report, issues)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        )

def generate_recommendations(report: DiagnosticReport, issues: List[str]) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º environment
    env = report.environment
    
    if not env.get('windowTelegramWebApp'):
        recommendations.extend([
            "üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Menu Button –±–æ—Ç–∞",
            "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Web App URL –≤ @BotFather",
            "üîß URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: https://msk-flower.su/telegram"
        ])
    
    if env.get('initData') == '–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ':
        recommendations.extend([
            "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Mini App",
            "üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞",
            "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTTPS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ–º–µ–Ω–∞"
        ])
    
    if not env.get('isTelegramBrowser'):
        recommendations.append("‚ÑπÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ Telegram")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
    error_logs = [log for log in report.logs if log.level == 'error']
    for error in error_logs:
        if 'Invalid Telegram data' in error.message:
            recommendations.extend([
                "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞",
                "üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤ @BotFather"
            ])
        
        if 'initData –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã' in error.message:
            recommendations.extend([
                "üîß –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start",
                "üîß –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            ])
    
    if not recommendations:
        recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return recommendations

@router.get("/health")
async def health_check() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    –î–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è load balancer'–æ–≤
    """
    try:
        health_status = await get_system_health()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTTP —Å—Ç–∞—Ç—É—Å
        if health_status["status"] == "unhealthy":
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=health_status
            )
        elif health_status["status"] == "degraded":
            # 200 OK, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            return {
                **health_status,
                "warning": "System is running but some components are degraded"
            }
        
        return health_status
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "status": "error",
                "message": f"Health check failed: {str(e)}"
            }
        )

@router.get("/metrics")
async def get_metrics(
    current_user: User = Depends(get_current_admin_user)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        metrics = await get_system_metrics()
        return {
            "status": "success",
            "data": {
                "timestamp": metrics.timestamp.isoformat(),
                "system": {
                    "cpu_percent": metrics.cpu_percent,
                    "memory_percent": metrics.memory_percent,
                    "disk_percent": metrics.disk_percent,
                },
                "application": {
                    "active_connections": metrics.active_connections,
                    "response_time_avg": metrics.response_time_avg,
                    "error_rate": metrics.error_rate,
                    "requests_per_minute": metrics.requests_per_minute,
                }
            }
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get metrics: {str(e)}"
        )

@router.get("/alerts")
async def get_alerts(
    current_user: User = Depends(get_current_admin_user)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        alerts = await alert_manager.get_active_alerts()
        return {
            "status": "success",
            "data": {
                "active_alerts": alerts,
                "count": len(alerts)
            }
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get alerts: {str(e)}"
        )

@router.post("/alerts/{alert_id}/resolve")
async def resolve_alert(
    alert_id: str,
    current_user: User = Depends(get_current_admin_user)
) -> Dict[str, Any]:
    """
    –†–∞–∑—Ä–µ—à–∏—Ç—å –∞–ª–µ—Ä—Ç
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        success = await alert_manager.resolve_alert(alert_id)
        
        if success:
            return {
                "status": "success",
                "message": f"Alert {alert_id} resolved successfully"
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Alert {alert_id} not found"
            )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to resolve alert: {str(e)}"
        )

@router.post("/alerts/test")
async def create_test_alert(
    current_user: User = Depends(get_current_admin_user)
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        alert = await create_alert(
            level=AlertLevel.INFO,
            title="Test Alert",
            message="This is a test alert created by admin",
            source="manual_test"
        )
        
        return {
            "status": "success",
            "message": "Test alert created successfully",
            "alert_id": alert.id
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create test alert: {str(e)}"
        )

@router.get("/stats")
async def get_system_stats(
    current_user: User = Depends(get_current_admin_user),
    db: Session = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        from app.models.user import User as UserModel
        from app.models.order import Order
        from app.models.flower import Flower
        from app.models.review import Review
        from sqlalchemy import func, text
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db.query(UserModel).count()
        active_users = db.query(UserModel).filter(UserModel.is_active == True).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        total_orders = db.query(Order).count()
        today_orders = db.query(Order).filter(
            func.date(Order.created_at) == func.current_date()
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤
        total_flowers = db.query(Flower).count()
        available_flowers = db.query(Flower).filter(Flower.is_available == True).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        total_reviews = db.query(Review).count()
        avg_rating = db.query(func.avg(Review.rating)).scalar() or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_size_result = db.execute(text(
            "SELECT pg_size_pretty(pg_database_size(current_database()))"
        )).scalar()
        
        return {
            "status": "success",
            "data": {
                "users": {
                    "total": total_users,
                    "active": active_users,
                    "inactive": total_users - active_users
                },
                "orders": {
                    "total": total_orders,
                    "today": today_orders
                },
                "flowers": {
                    "total": total_flowers,
                    "available": available_flowers,
                    "unavailable": total_flowers - available_flowers
                },
                "reviews": {
                    "total": total_reviews,
                    "average_rating": round(float(avg_rating), 2)
                },
                "database": {
                    "size": db_size_result
                }
            }
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get system stats: {str(e)}"
        )

@router.get("/logs")
async def get_recent_logs(
    lines: int = 100,
    level: str = "ERROR",
    current_user: User = Depends(get_current_admin_user)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        import subprocess
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∏–∑ journalctl –∏–ª–∏ —Ñ–∞–π–ª–∞
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —á–µ—Ä–µ–∑ journalctl (systemd)
            cmd = f"journalctl -u flower-backend -n {lines} --no-pager"
            result = subprocess.run(
                cmd.split(),
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                logs = result.stdout.split('\n')
            else:
                # Fallback –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
                with open('/var/log/flower/app.log', 'r') as f:
                    logs = f.readlines()[-lines:]
        
        except (subprocess.TimeoutExpired, FileNotFoundError, Exception):
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            logs = ["Logs not available"]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if level != "ALL":
            filtered_logs = [log for log in logs if level.upper() in log.upper()]
        else:
            filtered_logs = logs
        
        return {
            "status": "success",
            "data": {
                "logs": filtered_logs[-lines:],
                "total_lines": len(filtered_logs),
                "level_filter": level
            }
        }
    except Exception as e:
        return {
            "status": "error",
            "message": f"Failed to retrieve logs: {str(e)}",
            "data": {
                "logs": [],
                "total_lines": 0,
                "level_filter": level
            }
        } 

@router.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "healthy",
        "service": "telegram-monitoring",
        "timestamp": datetime.utcnow().isoformat()
    }

@router.get("/telegram-status")
def telegram_status():
    """–°—Ç–∞—Ç—É—Å Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    from app.core.config import settings
    
    return {
        "bot_configured": bool(settings.TELEGRAM_BOT_TOKEN),
        "bot_username": settings.TELEGRAM_BOT_USERNAME,
        "webhook_url": settings.TELEGRAM_WEBHOOK_URL,
        "mini_app_url": "https://msk-flower.su/telegram",
        "status": "configured" if settings.TELEGRAM_BOT_TOKEN else "not_configured"
    } 